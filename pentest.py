import nmap # type: ignore
import ipaddress
import subprocess
from tqdm import tqdm

# 1. Manually specify the targets to scan (subnets and single IPs)
targets = [
    "192.168.0.0/24",# Replace with your subnet
    "10.118.110.1",
    "192.168.135.1"  # Single IP address
    # Add more targets as needed
]

# Function to check if an IP is reachable (pingable)
def is_pingable(ip):
    try:
        subprocess.run(
            ["ping", "-c", "1", "-W", "1", str(ip)],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            check=True
        )
        return True
    except subprocess.CalledProcessError:
        return False

# 2. Scan each target (subnet or single IP)
def scan_target(target, overall_progress):
    nm = nmap.PortScanner()
    
    # Determine the output file based on the target type
    if '/' in target:  # Subnet
        output_file = f"results_{target.replace('/', '_')}.txt"
    else:  # Single IP
        output_file = f"results_{target}.txt"
    
    try:
        # Check if the target is a subnet or a single IP
        if '/' in target:  # Subnet
            ips = list(ipaddress.IPv4Network(target, strict=False).hosts())
        else:  # Single IP
            ips = [ipaddress.IPv4Address(target)]
        
        # Open the output file for writing
        with open(output_file, 'w') as file:
            # Progress bar for scanning IPs in the target
            for ip in tqdm(ips, desc=f"Scanning {target}", unit="IP", leave=False, dynamic_ncols=True):
                ip_str = str(ip)
                
                # Check if the IP is reachable
                if not is_pingable(ip_str):
                    continue  # Skip unreachable IPs
                
                file.write(f"\n[+] {ip_str} is live\n")
                
                try:
                    nm.scan(hosts=ip_str, arguments='-sV -T4')
                    if ip_str in nm.all_hosts():
                        host = nm[ip_str]
                        if 'tcp' in host and host['tcp']:
                            file.write(f"Open ports on {ip_str}:\n")
                            for port in host['tcp']:
                                state = host['tcp'][port]['state']
                                name = host['tcp'][port]['name']
                                product = host['tcp'][port].get('product', '')
                                version = host['tcp'][port].get('version', '')
                                result = f"  {port}/tcp {state} {name} {product} {version}\n"
                                file.write(result)
                        else:
                            file.write("No open ports found.\n")
                except Exception as e:
                    error_message = f"[-] Error scanning {ip_str}: {e}\n"
                    file.write(error_message)
                
                overall_progress.update(1)  # Update overall progress bar
    except ValueError as e:
        pass  # Ignore invalid targets

# 3. Run the scanner for all specified targets
def scan_all_targets():
    total_ips = sum([
        len(list(ipaddress.IPv4Network(target, strict=False).hosts())) if '/' in target else 1
        for target in targets
    ])
    with tqdm(total=total_ips, desc="Overall Progress", unit="IP", dynamic_ncols=True, leave=True) as overall_progress:
        for target in targets:
            scan_target(target, overall_progress)

# 4. Main execution
if __name__ == "__main__":
    scan_all_targets()
